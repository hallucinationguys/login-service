basePath: /v1
definitions:
  common.AppError:
    properties:
      error_key:
        type: string
      log:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  common.successRes:
    properties:
      data: {}
      filter: {}
      paging: {}
      status_code:
        type: integer
    type: object
  usermodel.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  usermodel.LoginUserResponse:
    properties:
      access_token:
        type: string
      expired_at:
        type: string
      user:
        $ref: '#/definitions/usermodel.UserResponse'
    type: object
  usermodel.UserCreate:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/usermodel.UserRole'
      status:
        type: integer
      updated_at:
        type: string
    type: object
  usermodel.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        $ref: '#/definitions/usermodel.UserRole'
      updated_at:
        type: string
    type: object
  usermodel.UserRole:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
info:
  contact: {}
  description: Ecosystem Hallucination Guys API Document
  title: Login Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login user, returns user and set session
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.LoginUserResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Login new user
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Register new user
      tags:
      - Authentication
  /profile:
    get:
      consumes:
      - application/json
      description: Get user info
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - ApiKeyAuth: []
      summary: Profile user
      tags:
      - Profile
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
